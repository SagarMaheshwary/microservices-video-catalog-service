// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v5.26.0
// source: internal/proto/video_catalog/video_catalog.proto

package video_catalog

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// VideoCatalogServiceClient is the client API for VideoCatalogService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type VideoCatalogServiceClient interface {
	FindAll(ctx context.Context, in *FindAllRequest, opts ...grpc.CallOption) (*FindAllResponse, error)
	FindById(ctx context.Context, in *FindByIdRequest, opts ...grpc.CallOption) (*FindByIdResponse, error)
}

type videoCatalogServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewVideoCatalogServiceClient(cc grpc.ClientConnInterface) VideoCatalogServiceClient {
	return &videoCatalogServiceClient{cc}
}

func (c *videoCatalogServiceClient) FindAll(ctx context.Context, in *FindAllRequest, opts ...grpc.CallOption) (*FindAllResponse, error) {
	out := new(FindAllResponse)
	err := c.cc.Invoke(ctx, "/videocatalog.VideoCatalogService/FindAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *videoCatalogServiceClient) FindById(ctx context.Context, in *FindByIdRequest, opts ...grpc.CallOption) (*FindByIdResponse, error) {
	out := new(FindByIdResponse)
	err := c.cc.Invoke(ctx, "/videocatalog.VideoCatalogService/FindById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// VideoCatalogServiceServer is the server API for VideoCatalogService service.
// All implementations must embed UnimplementedVideoCatalogServiceServer
// for forward compatibility
type VideoCatalogServiceServer interface {
	FindAll(context.Context, *FindAllRequest) (*FindAllResponse, error)
	FindById(context.Context, *FindByIdRequest) (*FindByIdResponse, error)
	mustEmbedUnimplementedVideoCatalogServiceServer()
}

// UnimplementedVideoCatalogServiceServer must be embedded to have forward compatible implementations.
type UnimplementedVideoCatalogServiceServer struct {
}

func (UnimplementedVideoCatalogServiceServer) FindAll(context.Context, *FindAllRequest) (*FindAllResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindAll not implemented")
}
func (UnimplementedVideoCatalogServiceServer) FindById(context.Context, *FindByIdRequest) (*FindByIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindById not implemented")
}
func (UnimplementedVideoCatalogServiceServer) mustEmbedUnimplementedVideoCatalogServiceServer() {}

// UnsafeVideoCatalogServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to VideoCatalogServiceServer will
// result in compilation errors.
type UnsafeVideoCatalogServiceServer interface {
	mustEmbedUnimplementedVideoCatalogServiceServer()
}

func RegisterVideoCatalogServiceServer(s grpc.ServiceRegistrar, srv VideoCatalogServiceServer) {
	s.RegisterService(&VideoCatalogService_ServiceDesc, srv)
}

func _VideoCatalogService_FindAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindAllRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VideoCatalogServiceServer).FindAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/videocatalog.VideoCatalogService/FindAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VideoCatalogServiceServer).FindAll(ctx, req.(*FindAllRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VideoCatalogService_FindById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VideoCatalogServiceServer).FindById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/videocatalog.VideoCatalogService/FindById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VideoCatalogServiceServer).FindById(ctx, req.(*FindByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// VideoCatalogService_ServiceDesc is the grpc.ServiceDesc for VideoCatalogService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var VideoCatalogService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "videocatalog.VideoCatalogService",
	HandlerType: (*VideoCatalogServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "FindAll",
			Handler:    _VideoCatalogService_FindAll_Handler,
		},
		{
			MethodName: "FindById",
			Handler:    _VideoCatalogService_FindById_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "internal/proto/video_catalog/video_catalog.proto",
}
